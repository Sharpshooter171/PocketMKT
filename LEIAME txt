LEIAME.txt

==========================================================
ASSISTENTE VIRTUAL PARA ESCRIT√ìRIOS DE ADVOCACIA
==========================================================

O QUE √â ESTE APP?
-----------------
Este √© um assistente virtual inteligente, projetado especialmente para escrit√≥rios de advocacia.  
Ele automatiza o atendimento inicial, responde d√∫vidas administrativas, orienta clientes e auxilia advogados em rotinas do escrit√≥rio ‚Äî tudo de forma r√°pida, profissional e acolhedora.

PRINCIPAIS FUNCIONALIDADES
--------------------------
- Atende clientes via WhatsApp, Web ou integra√ß√£o direta.
- Realiza triagem inicial de novos clientes (coletando nome, motivo do contato, prefer√™ncia de hor√°rio, etc.).
- Responde d√∫vidas administrativas, agenda, documentos pendentes, honor√°rios e rotinas do escrit√≥rio.
- Encaminha d√∫vidas t√©cnicas/jur√≠dicas diretamente ao advogado respons√°vel.
- Nunca fornece opini√µes jur√≠dicas, prazos processuais ou informa√ß√µes t√©cnicas de processos.
- Respostas sempre claras, profissionais, diretas e acolhedoras.
- Suporte a integra√ß√£o com sistemas internos, Google Calendar, planilhas e outras rotinas digitais do escrit√≥rio.
- Aprendizado cont√≠nuo: o assistente evolui conforme recebe feedback real.

COMO FUNCIONA
-------------
1. **Cliente inicia o atendimento**: Pode ser via WhatsApp, Web ou canal integrado.
2. **Triagem autom√°tica**: O assistente coleta dados b√°sicos e entende o motivo do contato.
3. **Respostas r√°pidas e precisas**: O assistente responde instantaneamente, sem alucina√ß√£o, s√≥ dentro do escopo administrativo/organizacional.
4. **Encaminhamento seguro**: D√∫vidas t√©cnicas ou pedidos jur√≠dicos s√£o encaminhados ao advogado, nunca respondidos automaticamente.
5. **Integra√ß√£o e hist√≥rico**: Todo atendimento pode ser registrado em sistemas internos, garantindo rastreabilidade.

PARA QUEM √â ESTE APP?
---------------------
- **Advogados e Escrit√≥rios**: Automatize o atendimento e foque no que realmente importa.
- **Parceiros Comerciais**: Ofere√ßa uma solu√ß√£o moderna, robusta e escal√°vel para escrit√≥rios de advocacia.
- **Usu√°rios Finais (clientes dos escrit√≥rios)**: Tenha respostas r√°pidas, seguras e sem burocracia.

VANTAGENS
---------
- Atendimento imediato, 24h/dia, sem filas.
- Redu√ß√£o do tempo gasto com tarefas repetitivas pelo advogado.
- Padroniza√ß√£o das respostas e aumento da satisfa√ß√£o dos clientes.
- Flex√≠vel: pode ser personalizado para a realidade do escrit√≥rio.
- Escal√°vel: pronto para crescer junto com seu neg√≥cio.

SEGURAN√áA E PRIVACIDADE
-----------------------
- Dados dos clientes s√£o tratados com confidencialidade.
- Nenhuma informa√ß√£o sens√≠vel √© compartilhada fora do escrit√≥rio.
- O app segue as melhores pr√°ticas de prote√ß√£o de dados.

COMO TESTAR
-----------
1. Solicite um acesso de demonstra√ß√£o via WhatsApp ou Web.
2. Envie perguntas t√≠picas de clientes ou tente situa√ß√µes reais de triagem.
3. Veja como o assistente responde, encaminha e organiza a rotina do escrit√≥rio.

SUPORTE E CUSTOMIZA√á√ÉO
----------------------
Quer adaptar para seu escrit√≥rio, integrar com outros sistemas ou personalizar fluxos?  
Entre em contato para suporte t√©cnico, treinamento ou customiza√ß√µes!

D√öVIDAS?
--------
Fale com nosso time para saber como transformar o atendimento do seu escrit√≥rio com intelig√™ncia artificial aplicada √† advocacia.

==========================================================
# PocketMKT ‚Äì Assistente Virtual para Escrit√≥rios de Advocacia

Este projeto traz um assistente virtual inteligente, modular, extens√≠vel e seguro para automa√ß√£o de atendimento e rotinas em escrit√≥rios de advocacia, com suporte a integra√ß√£o via WhatsApp, Web, Google e APIs.

---

## üìÅ Estrutura de Pastas e Arquivos

‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ chat_simulator
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ chat.html
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ simulador_chat.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ venv
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ classification.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ database_service.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google_service.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google_sheets_service.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ messages.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ollama_service.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prompt_config.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ classification.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ database_service.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google_service.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ init.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ollama_service.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prompt_config.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ text_processing.cpython-313.pyc
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ routes
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ atendimento.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ text_processing.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ text_processing.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ venv
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .gitignore
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ include
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lib
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lib64 -> lib
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pyvenv.cfg
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Whisper
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ audio
‚îú‚îÄ‚îÄ config
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ credentials.json
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ legal_system_config.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ oauth_credentials.json
‚îú‚îÄ‚îÄ data
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ advocacia-data.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ advocacia-set
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dataset_finetune_advocacia.jsonl
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gerar_dataset_advocacia.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ LoRA-PFET
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ relatorio_exemplos_especiais.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Faker.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lojas_ecommerce_generator.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ psicoterapia_data.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ advocacia-data.cpython-313.pyc
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ venv
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ bin
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ .gitignore
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ include
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ lib
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ lib64 -> lib
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ pyvenv.cfg
‚îú‚îÄ‚îÄ docs
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Lista de fun√ß√µes do Pocket_MKT.odt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Pre√ßo Final para o PocketMKT.txt
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Sem t√≠tulo 2.odt
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ eval
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ eval_results.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ eval_segmentado.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ inferencia_eval.py
‚îú‚îÄ‚îÄ LEIAME txt
‚îú‚îÄ‚îÄ logs
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ messages.db
‚îú‚îÄ‚îÄ models
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mistral-finetune-advocacia-45k
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ checkpoint-3000
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ checkpoint-3750
‚îú‚îÄ‚îÄ .ngrok.exe.old
‚îú‚îÄ‚îÄ notebooks
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ fine-tunniing-LoRA-PEFT-advocacia.ipynb
‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.cpython-313.pyc
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ README.txt
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ setup.sh


### **Raiz do Projeto**
- **main.py**  
  Ponto de entrada principal do backend Flask. Orquestra as integra√ß√µes e inicializa o servidor web.
- **requirements.txt**  
  Lista completa de depend√™ncias Python.
- **README.md / LEIAME.txt**  
  Apresenta√ß√£o do app, instru√ß√µes e explica√ß√µes t√©cnicas e comerciais.
- **.env**  
  Vari√°veis de ambiente (segredos, IPs, tokens, configs de deploy). **Nunca subir para o reposit√≥rio!**
- **setup.sh**  
  Script auxiliar para setup r√°pido do ambiente e depend√™ncias.
- **logs/**  
  Armazena arquivos de log do sistema, execu√ß√µes, erros e hist√≥rico de deploy.

---

### **app/**
> **N√∫cleo do c√≥digo-fonte. Toda l√≥gica principal e integra√ß√µes ficam aqui.**

- **chat_simulator/**  
  Simulador de chat usado para testes locais e valida√ß√£o do bot. Base para poss√≠veis frontends web.
    - `chat.html` ‚Äî Frontend web do simulador.
    - `simulador_chat.py` ‚Äî Backend do simulador de chat.
    - `requirements.txt` ‚Äî Depend√™ncias espec√≠ficas do simulador.
- **routes/**  
  Organiza fluxos do app por fun√ß√£o:
    - `atendimento.py` ‚Äî Fluxos de atendimento automatizado (usu√°rio, cliente, advogado).
    - `text_processing.py` ‚Äî Fun√ß√µes de reconhecimento de entidades e an√°lise textual.
- **ollama_service.py**  
  Integra√ß√£o com servidores/modelos LLM (Ollama, Mistral etc).
- **google_service.py / google_sheets_service.py**  
  Integra√ß√µes OAuth2, Google Drive, Google Sheets.
- **database_service.py**  
  Gerencia o banco local de mensagens e hist√≥ricos do chat.
- **classification.py**  
  (Prov√°vel) L√≥gica de classifica√ß√£o/inten√ß√£o e rotulagem dos di√°logos.
- **prompt_config.py**  
  Centraliza system prompts, templates e padr√µes de resposta para o bot.
- **text_processing.py**  
  N√∫cleo de p√≥s-processamento de texto, reconhecimento de entidades (com spaCy e regex).
- **messages.db**  
  Banco SQLite local (logs/hist√≥rico de intera√ß√µes).

---

### **config/**
> **Configura√ß√µes sens√≠veis e integra√ß√µes de terceiros.**

- **credentials.json / oauth_credentials.json**  
  Arquivos de credenciais Google OAuth2 e APIs.  
  **Importante:** Apenas o arquivo de exemplo deve estar versionado, o real deve ser mantido seguro e referenciado no `.env`.
- **legal_system_config.py**  
  Configura√ß√µes espec√≠ficas de regras jur√≠dicas ou integra√ß√µes com outros sistemas.

---

### **data/**
> **Scripts de gera√ß√£o de datasets, datasets de treinamento e relat√≥rios de an√°lise.**

- **advocacia-set/**  
  Pasta com dataset, scripts de gera√ß√£o de dataset para fine-tuning LoRA/PEFT e relat√≥rios anal√≠ticos.
    - `dataset_finetune_advocacia.jsonl` ‚Äî Dataset principal para treino do modelo.
    - `gerar_dataset_advocacia.py` ‚Äî Script gerador do dataset sint√©tico e balanceado.
    - `relatorio_exemplos_especiais.py` ‚Äî Gera√ß√£o e an√°lise de exemplos negativos e edge cases.
    - `LoRA-PFET/` ‚Äî Dados e experimentos para treinamento de LoRA/PEFT.
- **Faker.py, lojas_ecommerce_generator.py, psicoterapia_data.py**  
  Scripts utilit√°rios para gerar dados sint√©ticos de outros nichos para poss√≠veis expans√µes.
- **advocacia-data.py**  
  Script auxiliar para organiza√ß√£o dos dados jur√≠dicos.

---

### **models/**
> **Modelos treinados LoRA/PEFT, checkpoints e arquivos bin√°rios.**

- **mistral-finetune-advocacia-45k/**  
  Pasta do modelo principal treinado.
    - **checkpoint-3750/** ‚Äî Checkpoint final do treinamento (arquivos: `adapter_config.json`, `adapter_model.safetensors`, etc.)
    - **checkpoint-3000/** ‚Äî Checkpoint intermedi√°rio.
- **(Outras pastas de modelos/checkpoints futuros)**

---

### **notebooks/**
> **Notebooks Jupyter para experimenta√ß√£o, an√°lise e visualiza√ß√£o dos resultados dos modelos.**

- **fine-tunniing-LoRA-PEFT-advocacia.ipynb**  
  Notas, experimentos e an√°lises do fine-tuning LoRA/PEFT.

---

### **eval/**
> **Scripts de avalia√ß√£o autom√°tica e resultados dos testes do modelo.**

- **eval_segmentado.py**  
  Script para avalia√ß√£o segmentada dos fluxos.
- **eval_results.txt**  
  Resultados dos testes autom√°ticos de infer√™ncia.
- **inferencia_eval.py**  
  Script principal de infer√™ncia em batch para valida√ß√£o do modelo.

---

### **docs/**
> **Documenta√ß√£o extra, apresenta√ß√µes, listas de fun√ß√µes e instru√ß√µes comerciais.**

- **Lista de fun√ß√µes do Pocket_MKT.odt**  
- **Pre√ßo Final para o PocketMKT.txt**  
- **Sem t√≠tulo 2.odt**  
  *(e outros materiais para parceiros e clientes)*

---

### **logs/**
> **Arquivos de log e hist√≥rico de execu√ß√µes do sistema.**

---

### **venv/**
> **Ambiente virtual Python local. N√£o precisa ser versionado, s√≥ usado para desenvolvimento local.**

---

## üîê **Seguran√ßa e boas pr√°ticas**
- Os arquivos `.env`, `credentials.json`, `oauth_credentials.json` **NUNCA devem ser versionados no GitHub** ou compartilhados fora dos ambientes controlados.
- Sempre usar `.env.example` e `credentials.example.json` para facilitar deploy sem expor segredos.

---

## üöÄ **Como rodar o projeto**
1. Clone o reposit√≥rio e crie um ambiente virtual:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r requirements.txt

2. Copie os arquivos de credenciais para /config e configure o .env conforme seu ambiente.

3. Rode o backend Flask:
python main.py

4. (Opcional) Rode o simulador de chat para testes locais:

5. Use os scripts em /eval para testar a performance do modelo.

6. Treine/fine-tune seu modelo usando scripts em /data/advocacia-set/ conforme desejado.
