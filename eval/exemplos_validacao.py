#!/usr/bin/env python3
"""
Exemplos espec√≠ficos de valida√ß√£o de cada integra√ß√£o Google
Use este script para testar integra√ß√µes isoladamente
"""

import requests
import json
from datetime import datetime
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials

BASE_URL = "http://127.0.0.1:5000"

def exemplo_validacao_planilha():
    """
    Exemplo: Cliente relata caso -> Validar se planilha foi criada
    """
    print("üß™ TESTE: Cria√ß√£o de Planilha Google Sheets")
    print("="*50)
    
    # Enviar relato de caso completo
    payload = {
        "mensagem": "Sou Jo√£o Silva, CPF 111.222.333-44, trabalho na empresa ABC h√° 3 anos. Fui demitido sem justa causa e quero entrar com a√ß√£o trabalhista.",
        "numero": "11999990001", 
        "escritorio_id": "ESCRITORIO_TESTE"
    }
    
    print("üì§ Enviando relato de caso...")
    response = requests.post(f"{BASE_URL}/processar_atendimento", json=payload)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Resposta recebida: {result.get('resposta', '')[:100]}...")
        
        # Verificar se retornou ID da planilha
        sheet_id = result.get('id_planilha') or result.get('sheet_id')
        if sheet_id:
            print(f"‚úÖ ID da planilha retornado: {sheet_id}")
            
            # Tentar validar na API do Google Sheets
            try:
                # Substitua pelo seu arquivo de credenciais
                creds = Credentials.from_service_account_file(
                    '/home/igor-caldas/PocketMKT/credentials.json',
                    scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
                )
                
                service = build('sheets', 'v4', credentials=creds)
                
                # Ler dados da planilha
                sheet = service.spreadsheets().values().get(
                    spreadsheetId=sheet_id,
                    range="A1:H10"  # Primeiras 10 linhas
                ).execute()
                
                valores = sheet.get('values', [])
                print(f"‚úÖ Planilha validada! {len(valores)} linhas encontradas")
                
                if valores:
                    print("üìã Primeira linha (cabe√ßalho):")
                    print(f"   {valores[0]}")
                    
                    if len(valores) > 1:
                        print("üìã Segunda linha (dados):")
                        print(f"   {valores[1]}")
                
            except Exception as e:
                print(f"‚ùå Erro ao validar planilha: {e}")
                print("üí° Verifique se as credenciais Google est√£o configuradas")
        else:
            print("‚ùå ID da planilha n√£o retornado no JSON")
            print(f"üîç Campos dispon√≠veis: {list(result.keys())}")
    else:
        print(f"‚ùå Erro HTTP: {response.status_code}")

def exemplo_validacao_calendario():
    """
    Exemplo: Cliente agenda consulta -> Validar se evento foi criado
    """
    print("\nüß™ TESTE: Cria√ß√£o de Evento Google Calendar")
    print("="*50)
    
    payload = {
        "mensagem": "Preciso agendar uma consulta para segunda-feira √†s 14h para discutir meu caso trabalhista.",
        "numero": "11999990001",
        "escritorio_id": "ESCRITORIO_TESTE"
    }
    
    print("üì§ Enviando solicita√ß√£o de agendamento...")
    response = requests.post(f"{BASE_URL}/processar_atendimento", json=payload)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Resposta recebida: {result.get('resposta', '')[:100]}...")
        
        # Verificar se retornou ID do evento
        event_id = result.get('id_evento') or result.get('event_id') or result.get('calendar_id')
        if event_id:
            print(f"‚úÖ ID do evento retornado: {event_id}")
            
            try:
                creds = Credentials.from_service_account_file(
                    '/home/igor-caldas/PocketMKT/credentials.json',
                    scopes=['https://www.googleapis.com/auth/calendar.readonly']
                )
                
                service = build('calendar', 'v3', credentials=creds)
                
                # Buscar evento
                event = service.events().get(
                    calendarId='primary',
                    eventId=event_id
                ).execute()
                
                print(f"‚úÖ Evento validado!")
                print(f"üìÖ T√≠tulo: {event.get('summary', 'Sem t√≠tulo')}")
                print(f"üïê In√≠cio: {event.get('start', {}).get('dateTime', 'N√£o definido')}")
                print(f"üìç Local: {event.get('location', 'N√£o definido')}")
                
            except Exception as e:
                print(f"‚ùå Erro ao validar evento: {e}")
        else:
            print("‚ùå ID do evento n√£o retornado no JSON")
    else:
        print(f"‚ùå Erro HTTP: {response.status_code}")

def exemplo_validacao_email():
    """
    Exemplo: Advogado completa onboarding -> Validar se email foi enviado
    """
    print("\nüß™ TESTE: Envio de Email Gmail")
    print("="*50)
    
    payload = {
        "mensagem": "Sou Dr. Carlos Oliveira, OAB/SP 987654, email carlos@advocacia.com, especialidade direito civil.",
        "numero": "11988887777"
    }
    
    print("üì§ Enviando onboarding de advogado...")
    response = requests.post(f"{BASE_URL}/mensagem", json=payload)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Resposta recebida: {result.get('reply', '')[:100]}...")
        
        # Verificar se retornou status de email
        email_status = result.get('email_enviado') or result.get('email_status') or result.get('message_id')
        if email_status:
            print(f"‚úÖ Status de email retornado: {email_status}")
            
            try:
                creds = Credentials.from_service_account_file(
                    '/home/igor-caldas/PocketMKT/credentials.json',
                    scopes=['https://www.googleapis.com/auth/gmail.readonly']
                )
                
                service = build('gmail', 'v1', credentials=creds)
                
                # Buscar emails enviados nos √∫ltimos 5 minutos
                from datetime import datetime, timedelta
                cinco_min_atras = int((datetime.now() - timedelta(minutes=5)).timestamp())
                
                messages = service.users().messages().list(
                    userId='me',
                    q=f'in:sent after:{cinco_min_atras}',
                    maxResults=5
                ).execute()
                
                emails_encontrados = messages.get('messages', [])
                print(f"‚úÖ {len(emails_encontrados)} emails enviados nos √∫ltimos 5 minutos")
                
                for msg in emails_encontrados[:2]:  # Mostrar apenas os 2 primeiros
                    message = service.users().messages().get(
                        userId='me',
                        id=msg['id'],
                        format='metadata',
                        metadataHeaders=['Subject', 'To']
                    ).execute()
                    
                    headers = message.get('payload', {}).get('headers', [])
                    subject = next((h['value'] for h in headers if h['name'] == 'Subject'), 'Sem assunto')
                    to = next((h['value'] for h in headers if h['name'] == 'To'), 'Destinat√°rio n√£o encontrado')
                    
                    print(f"üìß Email: {subject} -> {to}")
                
            except Exception as e:
                print(f"‚ùå Erro ao validar emails: {e}")
        else:
            print("‚ùå Status de email n√£o retornado no JSON")
    else:
        print(f"‚ùå Erro HTTP: {response.status_code}")

def verificar_retorno_esperado():
    """
    Mostra exemplo do retorno JSON esperado para cada integra√ß√£o
    """
    print("\nüìã RETORNOS JSON ESPERADOS:")
    print("="*50)
    
    print("üîπ Para cria√ß√£o de planilha:")
    exemplo_planilha = {
        "resposta": "Seu caso foi registrado com sucesso!",
        "id_planilha": "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms",
        "dados_coletados": {
            "nome_cliente": "Jo√£o Silva",
            "tipo_caso": "trabalhista",
            "descricao_caso": "Demiss√£o sem justa causa"
        }
    }
    print(json.dumps(exemplo_planilha, indent=2, ensure_ascii=False))
    
    print("\nüîπ Para agendamento:")
    exemplo_agenda = {
        "resposta": "Consulta agendada para segunda-feira √†s 14h",
        "id_evento": "abc123def456ghi789",
        "data_agendamento": "2025-08-11T14:00:00-03:00"
    }
    print(json.dumps(exemplo_agenda, indent=2, ensure_ascii=False))
    
    print("\nüîπ Para email:")
    exemplo_email = {
        "resposta": "Cadastro conclu√≠do! Verifique seu email.",
        "email_enviado": True,
        "message_id": "1234567890abcdef",
        "destinatario": "carlos@advocacia.com"
    }
    print(json.dumps(exemplo_email, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    print("üß™ VALIDADOR DE INTEGRA√á√ïES GOOGLE - EXEMPLOS")
    print("="*60)
    
    verificar_retorno_esperado()
    
    print(f"\nüöÄ Escolha um teste para executar:")
    print(f"1. Validar cria√ß√£o de planilha")
    print(f"2. Validar cria√ß√£o de evento")
    print(f"3. Validar envio de email")
    print(f"4. Executar todos")
    
    opcao = input(f"\nOp√ß√£o (1-4): ").strip()
    
    if opcao == "1":
        exemplo_validacao_planilha()
    elif opcao == "2":
        exemplo_validacao_calendario()
    elif opcao == "3":
        exemplo_validacao_email()
    elif opcao == "4":
        exemplo_validacao_planilha()
        exemplo_validacao_calendario()
        exemplo_validacao_email()
    else:
        print("‚ùå Op√ß√£o inv√°lida")
