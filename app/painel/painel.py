# -*- coding: utf-8 -*-
from flask import Flask, render_template_string, request, jsonify, redirect
import requests
import os
from pathlib import Path

# .env
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# ===== Instru√ß√£o longa para o painel (ser√° injetada no HTML) =====
INSTRUCAO_TESTE_ASSISTENTE = """
üìö GUIA DE TESTES DO ASSISTENTE MODULAR

Este guia explica o que cada fun√ß√£o faz, como testar e tamb√©m o que o assistente modular realiza nos bastidores para automatizar o seu trabalho. 
O objetivo √© que voc√™, como advogado(a), valide todos os fluxos e nos envie o arquivo JSON do debugger ao final para que possamos corrigir e otimizar o sistema.

‚öôÔ∏è O que o Assistente Modular faz ‚Äúpor tr√°s‚Äù:
‚Ä¢ üìä Cria e atualiza planilhas no Google Sheets para funcionar como CRM do escrit√≥rio.
‚Ä¢ üìÅ Cria pastas e salva documentos no Google Drive, organizando por nome do cliente.
‚Ä¢ üìß Envia e-mails pelo Gmail para confirma√ß√µes e envio de links.
‚Ä¢ üìÖ Cria eventos no Google Calendar e envia convites.
‚Ä¢ üí¨ Envia mensagens autom√°ticas via WhatsApp (vers√£o final).
‚Ä¢ üóÇ Atualiza listas de clientes aguardando retorno ou com documentos pendentes.
‚Ä¢ üì¢ Envia notifica√ß√µes de prazo ou audi√™ncia.

‚öñÔ∏è Fluxos do Advogado (`tipo_usuario = advogado`):
1. fluxo_onboarding_advogado ‚Üí Coleta dados para configurar CRM: nome, OAB, especialidade, escrit√≥rio e como organiza seus clientes (por √°rea, urg√™ncia, data etc.). 
   Teste: "Meu nome √© Jo√£o Silva, OAB 12345, especialista em direito trabalhista, organizo meus clientes por √°rea e urg√™ncia."
2. fluxo_aprovacao_peticao ‚Üí Registra peti√ß√£o aprovada. 
   Teste: "A peti√ß√£o est√° aprovada, pode protocolar."
3. fluxo_alerta_prazo ‚Üí Gera lembrete de prazo/audi√™ncia.
   Teste: "Prazo do recurso vence amanh√£."
4. fluxo_honorarios ‚Üí Registra valores de honor√°rios.
   Teste: "Os honor√°rios s√£o de R$ 5.000,00."
5. fluxo_documento_juridico ‚Üí Envia ou armazena modelo de documento.
   Teste: "Preciso de um modelo de contrato de presta√ß√£o de servi√ßos."
6. fluxo_envio_documento_cliente ‚Üí Salva documento para cliente.
   Teste: "Enviar c√≥pia da peti√ß√£o ao cliente."
7. fluxo_consulta_andamento ‚Üí Consulta andamento processual.
   Teste: "Verificar andamento do processo 0000000-00.0000.0.00.0000."
8. fluxo_pagamento_fora_padrao ‚Üí Registra pagamento fora do combinado.
   Teste: "O cliente pagou um valor menor que o acordado."
9. fluxo_indicacao ‚Üí Registra cliente indicado.
   Teste: "O Jo√£o me indicou a Maria como cliente."
10. fluxo_documento_pendente ‚Üí Marca documento pendente.
    Teste: "Falta o comprovante de endere√ßo."
11. fluxo_revisao_documento ‚Üí Solicita revis√£o.
    Teste: "Preciso que revise essa contesta√ß√£o."
12. fluxo_status_negociacao ‚Üí Registra status de negocia√ß√£o.
    Teste: "Negocia√ß√£o est√° em fase final."
13. fluxo_decisao_permuta ‚Üí Atualiza decis√£o sobre permuta.
    Teste: "Cliente aceitou a permuta."
14. fluxo_sumi√ßo_cliente ‚Üí Marca cliente inativo.
    Teste: "Cliente sumiu desde semana passada."
15. fluxo_update_clientes_aguardando ‚Üí Atualiza clientes aguardando.
    Teste: "Atualizar lista de clientes aguardando retorno."
16. fluxo_update_documento_pendente ‚Üí Atualiza status de documentos.
    Teste: "Atualizar situa√ß√£o do RG do cliente."
17. fluxo_nao_atendimento_area ‚Üí Marca caso como n√£o atendido por √°rea.
    Teste: "N√£o atuo em direito criminal."
18. fluxo_status_multiplos_processos ‚Üí Registra status de m√∫ltiplos processos.
    Teste: "Verificar processos 123 e 456."
19. fluxo_notificacao_cliente ‚Üí Envia notifica√ß√£o ao cliente.
    Teste: "Avisar cliente que audi√™ncia foi marcada."
20. fluxo_alterar_cancelar_agendamento ‚Üí Atualiza/cancela compromisso.
    Teste: "Cancelar reuni√£o de amanh√£."
21. fluxo_resumo_estatisticas ‚Üí Gera relat√≥rio.
    Teste: "Quantos casos foram fechados este m√™s?"
22. fluxo_lembrete_audiencia ‚Üí Cria lembrete de audi√™ncia.
    Teste: "Me lembrar da audi√™ncia dia 20."
23. fluxo_enviar_resumo_caso ‚Üí Envia resumo de caso.
    Teste: "Me envie o resumo do caso do cliente Jo√£o."

üë§ Fluxos do Cliente (`tipo_usuario = cliente`):
1. relato_caso ‚Üí Registra relato e salva no CRM.
   Cliente: "Fui demitido sem justa causa e quero meus direitos."
2. consulta_andamento_cliente ‚Üí Solicita dados para consulta processual.
   Cliente: "Quero saber o andamento do meu processo."
3. agendar_consulta_cliente ‚Üí Cria evento no Calendar.
   Cliente: "Quero agendar reuni√£o amanh√£ √†s 15h."
4. enviar_documento_cliente ‚Üí Salva documento no Drive e CRM.
   Cliente: Envia arquivo ou foto.
5. fluxo_nao_detectado ‚Üí Resposta padr√£o.
   Cliente: Mensagem fora dos fluxos acima.

üõ† Como Testar:
1. No painel, envie mensagens simulando cada fluxo, alternando tipo_usuario entre advogado e cliente.
2. Observe a resposta e, quando aplic√°vel, verifique se houve a√ß√£o por tr√°s (planilha criada, documento salvo, evento gerado).
3. Teste todos os fluxos ao menos uma vez.
4. Baixe o arquivo JSON do debugger no final.
5. Envie para nossa equipe para an√°lise e depura√ß√£o.
"""

app = Flask(__name__)

# ===== Config via .env =====
BACKEND_BASE_URL = os.getenv("BACKEND_BASE_URL", "http://127.0.0.1:5000").rstrip("/")
PANEL_HOST = os.getenv("PANEL_HOST", "0.0.0.0")
PANEL_PORT = int(os.getenv("PANEL_PORT", os.getenv("PORT", "8000")))

# Endpoints do backend
PROMPT_CONFIG_URL = f"{BACKEND_BASE_URL}/prompt_config"
STATUS_URL        = f"{BACKEND_BASE_URL}/status"
PROCESSAR_URL     = f"{BACKEND_BASE_URL}/processar_atendimento"

# Carrega o HTML e injeta vari√°veis via render_template_string
BASE_DIR = Path(__file__).resolve().parent
PAINEL_HTML_PATH = BASE_DIR / "painel.html"
PANEL_HTML = PAINEL_HTML_PATH.read_text(encoding="utf-8")

print("‚öñÔ∏è PocketMKT - Painel MVP (WhatsApp/Twilio)")
print("=" * 60)
print(f"üîó Backend: {BACKEND_BASE_URL}")
print(f"üåê Painel:  http://{PANEL_HOST}:{PANEL_PORT}/painel")
print("=" * 60)

@app.route("/")
def root():
    return redirect("/painel", code=302)

@app.route("/painel")
def painel():
    return render_template_string(
        PANEL_HTML,
        BACKEND_BASE_URL=BACKEND_BASE_URL,
        INSTRUCAO_TESTE_ASSISTENTE=INSTRUCAO_TESTE_ASSISTENTE
    )

@app.route("/prompt_config", methods=["GET", "POST"])
def prompt_config_route():
    try:
        if request.method == "GET":
            r = requests.get(PROMPT_CONFIG_URL, timeout=10)
        else:
            r = requests.post(PROMPT_CONFIG_URL, json=(request.get_json() or {}), timeout=15)
        return (r.text, r.status_code, {"Content-Type": r.headers.get("Content-Type", "application/json")})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/enviar", methods=["POST"])
def enviar():
    data = request.get_json(force=True) or {}
    payload = {
        "mensagem": data.get("mensagem", ""),
        "numero": data.get("numero"),
        "tipo_usuario": data.get("tipo_usuario", "cliente"),
        "escritorio_id": data.get("escritorio_id"),
    }
    try:
        r = requests.post(PROCESSAR_URL, json=payload, timeout=30)
        return jsonify(r.json()), r.status_code
    except Exception as e:
        return jsonify({"erro": "backend_offline", "detalhe": str(e)}), 502

@app.route("/status", methods=["GET"])
def status():
    try:
        r = requests.get(STATUS_URL, timeout=8)
        ok = r.status_code == 200
        body = r.json() if ok else {"code": r.status_code}
        return jsonify({
            "panel": "OK",
            "backend_url": BACKEND_BASE_URL,
            "backend_status": body
        }), 200
    except Exception as e:
        return jsonify({
            "panel": "OK",
            "backend_url": BACKEND_BASE_URL,
            "backend_status": "Desconectado",
            "erro": str(e)
        }), 200

if __name__ == "__main__":
    print("\nüöÄ Iniciando Painel PocketMKT (MVP WhatsApp/Twilio)...")
    print(f"   Acesse: http://{PANEL_HOST}:{PANEL_PORT}/painel")
    app.run(host=PANEL_HOST, port=PANEL_PORT, debug=True)
