from app.routes.text_processing import (
    fluxo_onboarding_advogado,
    fluxo_aprovacao_peticao,
    fluxo_alerta_prazo,
    fluxo_honorarios,
    fluxo_documento_juridico,
    fluxo_envio_documento_cliente,
    fluxo_consulta_andamento,
    fluxo_pagamento_fora_padrao,
    fluxo_indicacao,
    fluxo_documento_pendente,
    fluxo_revisao_documento,
    fluxo_status_negociacao,
    fluxo_decisao_permuta,
    fluxo_sumiço_cliente,
    fluxo_update_clientes_aguardando,
    fluxo_update_documento_pendente,
    fluxo_nao_atendimento_area,
    fluxo_status_multiplos_processos,
    fluxo_notificacao_cliente,
    fluxo_alterar_cancelar_agendamento,
    fluxo_resumo_estatisticas,
    fluxo_lembrete_audiencia,
    fluxo_enviar_resumo_caso,
    # ...inclua todos os fluxos implementados
)
# Substitui import direto por try/except com mocks
try:
    from app.google_service import (
        verificar_cliente_existente_google_api,
        registrar_lead_google_api,
        get_google_sheets_service,
        criar_evento_calendar,
        enviar_email_gmail,
        upload_drive_bytes,
    )
except ImportError:
    verificar_cliente_existente_google_api = lambda *args: None
    registrar_lead_google_api = lambda *args: None
    get_google_sheets_service = lambda *args, **kwargs: None
    criar_evento_calendar = lambda *args, **kwargs: (None, None)
    enviar_email_gmail = lambda *args, **kwargs: None
    upload_drive_bytes = lambda *args, **kwargs: (None, None)

from flask import Blueprint, request, jsonify, Response, g, redirect, url_for  # redirect/url_for
import logging, json, re  # logging estruturado e regex

# Configuração básica de logging (pode ser ajustada depois)
logging.basicConfig(level=logging.INFO)

# --- Fallback for MessagingResponse if twilio is missing ---
try:
    from twilio.twiml.messaging_response import MessagingResponse
except ImportError:
    class MessagingResponse:
        def __init__(self):
            self._msg = None
        def message(self, text):
            self._msg = text
        def __str__(self):
            return f"<Response><Message>{self._msg}</Message></Response>"

# === END PLACEHOLDER STUBS ===
# Dispatcher para fluxos jurídicos: retorna todas as ações possíveis para uma mensagem
def dispatcher_fluxos_advogado(mensagem):
    """
    Chama todos os fluxos jurídicos e retorna uma lista de ações possíveis para a mensagem.
    Útil para sugerir múltiplas rotas ou para logging/expansão futura.
    """
    fluxos = {
        "onboarding_advogado": fluxo_onboarding_advogado,
        "aprovacao_peticao": fluxo_aprovacao_peticao,
        "alerta_prazo": fluxo_alerta_prazo,
        "honorarios": fluxo_honorarios,
        "documento_juridico": fluxo_documento_juridico,
        "envio_documento_cliente": fluxo_envio_documento_cliente,
        "consulta_andamento": fluxo_consulta_andamento,
        "pagamento_fora_padrao": fluxo_pagamento_fora_padrao,
        "indicacao": fluxo_indicacao,
        "documento_pendente": fluxo_documento_pendente,
        "revisao_documento": fluxo_revisao_documento,
        "status_negociacao": fluxo_status_negociacao,
        "decisao_permuta": fluxo_decisao_permuta,
        "sumico_cliente": fluxo_sumiço_cliente,
        "update_clientes_aguardando": fluxo_update_clientes_aguardando,
        "update_documento_pendente": fluxo_update_documento_pendente,
        "nao_atendimento_area": fluxo_nao_atendimento_area,
        "status_multiplos_processos": fluxo_status_multiplos_processos,
        "notificacao_cliente": fluxo_notificacao_cliente,
        "alterar_cancelar_agendamento": fluxo_alterar_cancelar_agendamento,
        "resumo_estatisticas": fluxo_resumo_estatisticas,
        "lembrete_audiencia": fluxo_lembrete_audiencia,
        "enviar_resumo_caso": fluxo_enviar_resumo_caso
    }
    for nome, func in fluxos.items():
        resultado = func(mensagem)
        # Para fluxos que retornam dict, considerar "match" se não for None e tiver dados relevantes
        if resultado:
            return nome, resultado
    raise ValueError(f"Nenhum fluxo reconhecido para mensagem: {mensagem}")
def processar_mensagem_advogado(mensagem):
    """
    Processa uma mensagem recebida de advogado, testando todos os fluxos inteligentes.
    Retorna um dicionário com o status do fluxo detectado e dados relevantes.
    """
    # 1. Onboarding
    dados_onboarding = fluxo_onboarding_advogado(mensagem)
    if dados_onboarding and dados_onboarding.get("nome_completo"):
        # Salvar no banco, acionar planilha, etc.
        return {"status": "onboarding", "dados": dados_onboarding}

    # 2. Aprovação de petição
    status_peticao = fluxo_aprovacao_peticao(mensagem)
    if status_peticao and status_peticao.get("status") == "aprovado":
        # Liberar petição no sistema
        return {"status": "peticao_aprovada"}

    # 3. Alerta de prazo
    if fluxo_alerta_prazo(mensagem):
        # Acionar lembrete
        return {"status": "lembrete_prazo"}

    # 4. Honorários
    if fluxo_honorarios(mensagem):
        return {"status": "honorarios"}

    # 5. Documento jurídico
    if fluxo_documento_juridico(mensagem):
        return {"status": "documento_juridico"}

    # 6. Envio de documento ao cliente
    if fluxo_envio_documento_cliente(mensagem):
        return {"status": "envio_documento_cliente"}

    # 7. Consulta de andamento
    if fluxo_consulta_andamento(mensagem):
        return {"status": "consulta_andamento"}

    # 8. Pagamento fora do padrão
    if fluxo_pagamento_fora_padrao(mensagem):
        return {"status": "pagamento_fora_padrao"}

    # 9. Indicação
    if fluxo_indicacao(mensagem):
        return {"status": "indicacao"}

    # 10. Documento pendente
    if fluxo_documento_pendente(mensagem):
        return {"status": "documento_pendente"}

    # 11. Revisão de documento
    if fluxo_revisao_documento(mensagem):
        return {"status": "revisao_documento"}

    # 12. Status de negociação
    if fluxo_status_negociacao(mensagem):
        return {"status": "status_negociacao"}

    # 13. Decisão de permuta
    if fluxo_decisao_permuta(mensagem):
        return {"status": "decisao_permuta"}

    # 14. Sumiço de cliente
    if fluxo_sumiço_cliente(mensagem):
        return {"status": "sumico_cliente"}

    # 15. Update clientes aguardando
    if fluxo_update_clientes_aguardando(mensagem):
        return {"status": "update_clientes_aguardando"}

    # 16. Update documento pendente
    if fluxo_update_documento_pendente(mensagem):
        return {"status": "update_documento_pendente"}

    # 17. Não atendimento da área
    if fluxo_nao_atendimento_area(mensagem):
        return {"status": "nao_atendimento_area"}

    # 18. Status múltiplos processos
    if fluxo_status_multiplos_processos(mensagem):
        return {"status": "status_multiplos_processos"}

    # 19. Notificação ao cliente
    if fluxo_notificacao_cliente(mensagem):
        return {"status": "notificacao_cliente"}

    # 20. Alterar/cancelar agendamento
    if fluxo_alterar_cancelar_agendamento(mensagem):
        return {"status": "alterar_cancelar_agendamento"}

    # 21. Resumo de estatísticas
    if fluxo_resumo_estatisticas(mensagem):
        return {"status": "resumo_estatisticas"}

    # 22. Lembrete de audiência
    if fluxo_lembrete_audiencia(mensagem):
        return {"status": "lembrete_audiencia"}

    # 23. Enviar resumo do caso
    if fluxo_enviar_resumo_caso(mensagem):
        return {"status": "enviar_resumo_caso"}

    # Se não bater nenhum fluxo, responde padrão
    return {"status": "fluxo_nao_detectado"}

# Função: Conversão de lead em cliente com coleta e organização de documentos
def processar_conversao_cliente(numero, nome_cliente, documentos, relato_caso, email_advogado=None):
    """
    1. Solicita documento de identificação com foto e comprovante de endereço válido.
    2. Se não houver comprovante, oferece modelo de declaração de residência.
    3. Ao receber documentos, cria pasta no Google Drive com nome do cliente e armazena os arquivos.
    4. Adiciona arquivo de texto com relato do caso e atualiza conforme o CRM.
    5. Envia link da pasta para o advogado via WhatsApp.
    6. Debugging detalhado das integrações Google.
    """
    debug = {"drive": None, "whatsapp": None, "crm": None, "erro": None}
    try:
        # 1. Checagem dos documentos recebidos
        doc_id = documentos.get('identidade')
        doc_endereco = documentos.get('comprovante_endereco')
        precisa_declaracao = not doc_endereco
        link_declaracao = None
        if precisa_declaracao:
            # Gerar modelo de declaração de residência (link fictício ou real)
            link_declaracao = "https://docs.google.com/document/d/DECLARACAO_RESIDENCIA_MODEL"
        # 2. Criar pasta no Google Drive
        pasta_nome = nome_cliente.strip()
        pasta_id = None
        pasta_link = None
        if build:
            try:
                # Exemplo: criar pasta no Google Drive
                service = build('drive', 'v3', credentials=Credentials.from_authorized_user_file('token.json'))
                file_metadata = {'name': pasta_nome, 'mimeType': 'application/vnd.google-apps.folder'}
                folder = service.files().create(body=file_metadata, fields='id,webViewLink').execute()
                pasta_id = folder.get('id')
                pasta_link = folder.get('webViewLink')
                debug['drive'] = f"Pasta criada: {pasta_link}"
                # 3. Upload dos documentos recebidos
                for doc_tipo, doc_file in documentos.items():
                    if doc_file:
                        file_metadata = {'name': f"{doc_tipo}_{pasta_nome}", 'parents': [pasta_id]}
                        media = None  # Aqui você faria o upload real do arquivo
                        # Exemplo: service.files().create(body=file_metadata, media_body=media, fields='id').execute()
                # 4. Adicionar relato do caso como arquivo de texto
                file_metadata = {'name': f"relato_{pasta_nome}.txt", 'parents': [pasta_id]}
                media = None  # Aqui você faria upload do texto como arquivo
                # Exemplo: service.files().create(body=file_metadata, media_body=media, fields='id').execute()
            except Exception as e:
                debug['drive'] = f"Erro Drive: {e}"
        else:
            debug['drive'] = "Google Drive não disponível"
        # 5. Enviar link da pasta para o advogado via WhatsApp (simulado)
        mensagem = f"criei a pasta de {nome_cliente} e adicionei os documentos enviados neste link: {pasta_link or '[link indisponível]'}"
        # Aqui você pode integrar com o serviço de WhatsApp real ou simulado
        debug['whatsapp'] = f"Mensagem enviada: {mensagem}"
        # 6. Atualizar CRM (simulado)
        debug['crm'] = "CRM atualizado com novo cliente e documentos"
        return {
            "status": "ok",
            "mensagem": mensagem,
            "pasta_link": pasta_link,
            "debug": debug,
            "precisa_declaracao": precisa_declaracao,
            "link_declaracao": link_declaracao
        }
    except Exception as e:
        debug['erro'] = str(e)
        return {"status": "erro", "debug": debug}
import threading
from flask import Blueprint, request, jsonify, Response

# Blueprint deve ser definido antes de ser usado
atendimento_bp = Blueprint('atendimento', __name__)
prompt_config_lock = threading.Lock()



# ROTA PARA GET/POST DO PROMPT_CONFIG
@atendimento_bp.route('/prompt_config', methods=['GET', 'POST'])
def prompt_config_api():
    # Importação local para garantir que prompt_config está sempre atualizado
    import importlib
    prompt_config_module = importlib.import_module('app.prompt_config')
    config_ref = prompt_config_module.prompt_config
    if request.method == 'GET':
        return jsonify(config_ref)
    elif request.method == 'POST':
        data = request.json
        for k, v in data.items():
            config_ref[k] = v
        return jsonify({"status": "ok", "prompt_config": config_ref})

# Endpoint opcional para status detalhado (mock)
@atendimento_bp.route('/status', methods=['GET'])
def status_backend():
    return jsonify({
        "flask_backend": "OK",
        "google_sheets_status": "OK",
        "google_calendar_status": "OK",
        "gmail_status": "OK",
        "llm_status": "OK"
    })
import traceback
import os
import json
import tempfile
import requests
from datetime import datetime
try:
    import whisper
except ImportError:
    print("⚠️ Whisper não instalado, transcrições desabilitadas")
    whisper = None

try:
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
except ImportError:
    print("⚠️ Google API não instalada, funcionalidades desabilitadas")
    Credentials = None
    build = None
    HttpError = None

from email.mime.text import MIMEText
import base64
from flask import Blueprint, request, jsonify


try:
    from app.database_service import log_message
except ImportError:
    log_message = lambda *args: print(f"Log: {args}")

try:
    from app.ollama_service import get_llama_response
except ImportError:
    get_llama_response = lambda prompt: "LLM não disponível"

try:
    from app.prompt_config import prompt_config, montar_prompt_instruct
except ImportError:
    prompt_config = {}
    # Fallback function in case the import fails
    def montar_prompt_instruct(system_prompt, user_message):
        return f"<s>[INST] {system_prompt}\nUsuário: {user_message}\nAtendente: [/INST]"

try:
    from app.google_service import verificar_cliente_existente_google_api, registrar_lead_google_api
except ImportError:
    verificar_cliente_existente_google_api = lambda *args: None
    registrar_lead_google_api = lambda *args: None

try:
    from app.classification import extrair_infos
except ImportError:
    extrair_infos = lambda text: {}

# Global para controlar conversas e estado
conversas = {}

print("🚀 Carregando módulo de atendimento com integração completa...")
print("🤖 Whisper, Google Sheets, Gmail e Calendar carregados!")

# --- Intent detection simples e priorizado ---
import re as _re
_RE_NUM_PROC = _re.compile(r'\d{7}-\d{2}\.\d{4}\.\d\.\d{2}\.\d{4}')

def detect_intent(texto):
    t = (texto or "").lower().strip()

    # 1) Consulta de andamento (prioridade alta)
    if ("andamento" in t or "novidade" in t or "como está" in t or "como esta" in t) and "processo" in t:
        return "consulta_andamento_cliente"
    if _RE_NUM_PROC.search(t):
        return "consulta_andamento_cliente"

    # 2) Agendar consulta
    if any(k in t for k in ["agendar", "consulta", "horário", "horario", "reunião", "reuniao", "agenda", "sexta", "semana que vem"]):
        return "agendar_consulta_cliente"

    # 3) Enviar documento
    if any(k in t for k in ["rg", "cnh", "comprovante", "documento", "anexo", "pdf", "foto", "imagem"]):
        return "enviar_documento_cliente"

    # 4) Relato de caso (padrão)
    if any(k in t for k in ["demitid", "pensão", "pensao", "dívida", "divida", "juros", "banco", "indeniza", "direito"]):
        return "relato_caso"

    return "fluxo_nao_detectado"


def processar_relato_caso(texto_ou_audio, telefone_cliente, segmento, tipo_arquivo=None):
    """
    Processa relato de caso (texto ou áudio) e registra na planilha
    """
    print(f"📝 Processando relato de caso para cliente: {telefone_cliente}")
    
    # 1. Se for áudio, transcrever primeiro
    if tipo_arquivo and tipo_arquivo.lower() in ['audio', 'mp3', 'wav', 'ogg', 'm4a']:
        print("🎙️ Detectado arquivo de áudio, transcrevendo...")
        try:
            texto_caso = transcrever_audio_whisper(texto_ou_audio)
            if not texto_caso:
                return "❌ Não consegui transcrever o áudio. Tente enviar novamente ou digite o relato."
        except Exception as e:
            print(f"❌ Erro na transcrição: {e}")
            return "❌ Erro ao processar áudio. Tente enviar um arquivo de áudio válido ou digite o relato."
    else:
        texto_caso = texto_ou_audio
    
    # 2. Extrair informações do caso com LLM
    dados_caso = extrair_dados_caso_llm(texto_caso, dados_existentes={"telefone_cliente": telefone_cliente})
    
    # 3. Determinar nome do escritório (por enquanto, usar segmento)
    nome_escritorio = f"Escritório {segmento.title()}"
    email_advogado = None  # TODO: buscar email real do advogado contratante
    
    # 4. Registrar caso na planilha (cria planilha se necessário)
    sucesso = registrar_caso_planilha(nome_escritorio, dados_caso, email_advogado)
    
    if sucesso:
        # 5. Gerar resposta personalizada
        resposta = (
            f"✅ Relato anotado com sucesso!\n\n"
            f"📋 Resumo do seu caso:\n"
            f"• Área: {dados_caso['area_direito']}\n"
            f"• Urgência: {dados_caso['urgencia']}\n"
            f"• Status: Registrado para análise\n\n"
            f"Seu caso foi encaminhado para o advogado responsável. "
            f"Você será contatado em breve.\n\n"
            f"💬 Quer agendar um atendimento presencial ou tem mais alguma dúvida?"
        )
        
        return resposta
    else:
        return "❌ Erro ao registrar seu caso. Tente novamente ou entre em contato por telefone."

def transcrever_audio_whisper(audio_data_ou_url):
    """
    Transcreve áudio usando Whisper (OpenAI)
    """
    print(f"🎙️ Iniciando transcrição de áudio...")
    
    try:
        # Carregar modelo Whisper (cache automático)
        print("🔄 Carregando modelo Whisper...")
        modelo_whisper = whisper.load_model("base")
        print("✅ Modelo Whisper carregado")
        
        # Criar arquivo temporário para o áudio
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
            if isinstance(audio_data_ou_url, str) and audio_data_ou_url.startswith('http'):
                # Se for URL, baixar o arquivo
                print(f"📥 Baixando áudio da URL: {audio_data_ou_url[:50]}...")
                response = requests.get(audio_data_ou_url)
                temp_audio.write(response.content)
            else:
                # Se for dados binários
                print("💾 Salvando dados de áudio em arquivo temporário...")
                temp_audio.write(audio_data_ou_url)
            
            temp_audio_path = temp_audio.name
        
        print(f"🎙️ Transcrevendo áudio: {temp_audio_path}")
        resultado = modelo_whisper.transcribe(temp_audio_path)
        texto_transcrito = resultado["text"].strip()
        
        # Limpar arquivo temporário
        os.unlink(temp_audio_path)
        print(f"🗑️ Arquivo temporário removido: {temp_audio_path}")
        
        print(f"✅ Transcrição concluída: {texto_transcrito[:100]}...")
        return texto_transcrito
        
    except Exception as e:
        print(f"❌ Erro na transcrição com Whisper: {e}")
        traceback.print_exc()
        return None

def registrar_caso_planilha(nome_escritorio, dados_caso, email_advogado=None):
    """
    Registra caso jurídico em planilha específica do escritório
    Se planilha não existir, cria e envia link para o advogado
    """
    print(f"📊 Registrando caso na planilha do escritório: {nome_escritorio}")
    print(f"🔍 Dados do caso: {dados_caso}")
    
    try:
        from app.google_service import get_google_sheets_service, buscar_ou_criar_planilha
        
        # Buscar planilha específica do escritório
        arquivo_planilha_escritorio = f"sheet_id_{nome_escritorio.replace(' ', '_').lower()}.txt"
        print(f"📁 Procurando planilha: {arquivo_planilha_escritorio}")
        
        sheet_id = None
        planilha_nova = False
        
        if os.path.exists(arquivo_planilha_escritorio):
            with open(arquivo_planilha_escritorio, 'r') as f:
                sheet_id = f.read().strip()
            print(f"✅ Planilha existente encontrada: {sheet_id}")
        else:
            print(f"❌ Planilha não encontrada, criando nova...")
            planilha_nova = True
            sheet_id = criar_planilha_casos_escritorio(nome_escritorio, arquivo_planilha_escritorio)
            
            if sheet_id and email_advogado:
                print(f"📧 Enviando link da planilha para advogado: {email_advogado}")
                enviar_link_planilha_email(email_advogado, nome_escritorio, sheet_id)
        
        if not sheet_id:
            print("❌ Não foi possível obter ou criar sheet_id")
            return False
        
        # Registrar caso na planilha
        print(f"📝 Registrando caso na planilha: {sheet_id}")
        service = get_google_sheets_service()
        if not service:
            print("❌ Falha ao obter serviço Google Sheets")
            return False
        
        # Obter nome da primeira aba
        meta = service.spreadsheets().get(
            spreadsheetId=sheet_id,
            fields="sheets.properties"
        ).execute()
        primeira_aba = meta['sheets'][0]['properties']['title']
        print(f"🔖 Usando aba: {primeira_aba}")
        
        # Preparar dados para inserção
        agora = datetime.now().strftime("%d/%m/%Y %H:%M")
        linha_dados = [
            agora,                                          # Data/Hora
            dados_caso.get("nome_cliente", "NÃO_INFORMADO"), # Nome
            dados_caso.get("telefone", ""),                 # Telefone
            dados_caso.get("area_direito", "Genérico"),     # Área
            dados_caso.get("urgencia", "Média"),            # Urgência
            dados_caso.get("resumo_caso", ""),              # Resumo
            "Aguardando Análise",                          # Status
            dados_caso.get("observacoes", "")              # Observações
        ]
        
        # Inserir dados
        append_range = f"{primeira_aba}!A:H"
        body = {"values": [linha_dados]}
        
        service.spreadsheets().values().append(
            spreadsheetId=sheet_id,
            range=append_range,
            valueInputOption="RAW",
            insertDataOption="INSERT_ROWS",
            body=body
        ).execute()
        
        print("✅ Caso registrado com sucesso na planilha")
        
        # Se for planilha nova, avisar que o link foi enviado
        if planilha_nova and email_advogado:
            print(f"📧 Link da nova planilha enviado para: {email_advogado}")
        
        return True
        
    except Exception as e:
        print(f"❌ Erro ao registrar caso na planilha: {e}")
        traceback.print_exc()
        return False

def criar_planilha_casos_escritorio(nome_escritorio, arquivo_planilha):
    """
    Cria planilha específica para casos do escritório
    """
    print(f"📊 Criando planilha de casos para: {nome_escritorio}")
    
    try:
        from app.google_service import get_google_sheets_service
        
        service = get_google_sheets_service()
        if not service:
            print("❌ Falha ao obter serviço Google Sheets")
            return None
        
        # Criar planilha com nome específico
        titulo_planilha = f"Casos Jurídicos - {nome_escritorio}"
        spreadsheet = {
            'properties': {'title': titulo_planilha}
        }
        
        print(f"🔄 Criando planilha: {titulo_planilha}")
        created = service.spreadsheets().create(
            body=spreadsheet,
            fields='spreadsheetId,sheets.properties'
        ).execute()
        
        sheet_id = created.get('spreadsheetId')
        primeira_aba = created['sheets'][0]['properties']['title']
        
        print(f"✅ Planilha criada: https://docs.google.com/spreadsheets/d/{sheet_id}/edit")
        print(f"🔖 Primeira aba: {primeira_aba}")
        
        # Criar cabeçalho especializado para casos jurídicos
        cabecalho = [
            "Data/Hora",
            "Nome Cliente", 
            "Telefone",
            "Área do Direito",
            "Urgência",
            "Resumo do Caso",
            "Status",
            "Observações"
        ]
        
        header_range = f"{primeira_aba}!A1:H1"
        header_body = {"values": [cabecalho]}
        
        service.spreadsheets().values().update(
            spreadsheetId=sheet_id,
            range=header_range,
            valueInputOption="RAW",
            body=header_body
        ).execute()
        
        print("✅ Cabeçalho criado na planilha de casos")
        
        # Compartilhar planilha para edição pública
        from googleapiclient.discovery import build
        drive = build("drive", "v3", credentials=service._http.credentials)
        drive.permissions().create(
            fileId=sheet_id,
            body={"type": "anyone", "role": "writer"},
            fields="id"
        ).execute()
        
        print("🌐 Planilha compartilhada para edição pública")
        
        # Salvar sheet_id em arquivo
        with open(arquivo_planilha, 'w') as f:
            f.write(sheet_id)
        print(f"💾 Sheet ID salvo em: {arquivo_planilha}")
        
        return sheet_id
        
    except Exception as e:
        print(f"❌ Erro ao criar planilha de casos: {e}")
        traceback.print_exc()
        return None

def enviar_link_planilha_email(email_advogado, nome_advogado, sheet_id):
    """
    Envia link da planilha por email para o advogado
    """
    print(f"📧 Preparando envio de email para: {email_advogado}")
    
    try:
        from googleapiclient.discovery import build
        from app.google_service import get_google_sheets_service
        import base64
        from email.mime.text import MIMEText
        
        service = get_google_sheets_service()
        if not service:
            print("❌ Falha ao obter credenciais para Gmail")
            return False
        
        # Construir Gmail service
        gmail = build("gmail", "v1", credentials=service._http.credentials)
        
        # Link da planilha
        link_planilha = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit"
        
        # Conteúdo do email
        assunto = f"Nova Planilha de Casos Criada - {nome_advogado}"
        corpo_email = f"""
Olá!

Uma nova planilha de casos foi criada para o {nome_advogado}.

🔗 Link da Planilha: {link_planilha}

Esta planilha foi criada automaticamente pelo PocketMKT para organizar os casos dos seus clientes.

Características da planilha:
• Registra automaticamente casos relatados pelos clientes
• Organiza por área do direito, urgência e status
• Compartilhada para edição (você pode modificar diretamente)
• Atualizada em tempo real conforme novos casos chegam

Acesse o link para visualizar e gerenciar os casos.

Atenciosamente,
PocketMKT - Assistente Virtual
"""
        
        # Criar mensagem
        message = MIMEText(corpo_email, 'plain', 'utf-8')
        message['to'] = email_advogado
        message['subject'] = assunto
        
        # Codificar mensagem
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')
        
        # Enviar email
        print(f"📤 Enviando email para: {email_advogado}")
        gmail.users().messages().send(
            userId='me',
            body={'raw': raw_message}
        ).execute()
        
        print(f"✅ Email enviado com sucesso para: {email_advogado}")
        return True
        
    except Exception as e:
        print(f"❌ Erro ao enviar email: {e}")
        traceback.print_exc()
        return False

from twilio.twiml.messaging_response import MessagingResponse


# @atendimento_bp.route('/processar_atendimento', methods=['POST'])
# def processar_atendimento():
#     """
#     Endpoint principal para processar atendimento legal com LLM
#     Suporta texto e áudio (Whisper), extrai dados estruturados e registra caso
#     """
#     try:
#         print("🚀 === INÍCIO DO ATENDIMENTO LEGAL ===")
#         data = request.get_json() or {}
        
#         # Extrair informações da requisição
#         mensagem = data.get('mensagem', '')
#         audio_url = data.get('audio_url', '')

@atendimento_bp.route("/mensagem", methods=["POST"])
def receber_mensagem():
    # Suporte a application/x-www-form-urlencoded (Twilio) e JSON
    if request.content_type and request.content_type.startswith("application/json"):
        data = request.get_json(force=True)
        mensagem = data.get("mensagem", "")
        resposta_llm = responder_fluxo_universal(mensagem)
        return jsonify({"reply": resposta_llm})
    else:
        incoming_msg = request.values.get('Body', '').strip()
        from_number = request.values.get('From', '')
        print(f"Recebido de {from_number}: {incoming_msg}")
        resposta_llm = responder_fluxo_universal(incoming_msg)
        resp = MessagingResponse()
        resp.message(resposta_llm)
        return Response(str(resp), mimetype="application/xml")

@atendimento_bp.route('/processar_atendimento', methods=['POST'])
def processar_atendimento():
    """Endpoint principal unificado: detecta fluxos básicos de cliente e todos de advogado.
    Sempre retorna HTTP 200 com contrato mínimo (resposta, fluxo, numero, tipo_usuario, ids...)."""
    try:
        data = request.get_json() or {}
        mensagem = (data.get('mensagem') or '').strip()
        numero = data.get('numero')
        tipo_usuario = (data.get('tipo_usuario') or '').lower()
        fluxo_detectado = None
        resposta_texto = "Em breve..."
        ids = {}

        # ---------------- Fluxos ADVOGADO (mantém lógica existente) ----------------
        if tipo_usuario == 'advogado':
            try:
                resultado = processar_mensagem_advogado(mensagem)
                if isinstance(resultado, dict):
                    fluxo_detectado = resultado.get('status')
                else:
                    fluxo_detectado = 'fluxo_nao_detectado'
            except Exception:
                fluxo_detectado = 'erro_processar_advogado'

            # ✅ Respostas com palavras‑chave para os fluxos de advogado
            if fluxo_detectado == 'onboarding':
                resposta_texto = (
                    "✅ **Cadastro** recebido. Vou registrar sua **OAB**, **especialidade** e o **escritório**."
                )
            elif fluxo_detectado in ('peticao_aprovada', 'aprovacao_peticao'):
                resposta_texto = (
                    "📄 **Petição** aprovada. Vou preparar o **documento** e seguir com o protocolo."
                )
            elif fluxo_detectado in ('lembrete_prazo', 'alerta_prazo'):
                resposta_texto = (
                    "⏰ Vou acompanhar o **prazo** e criar lembrete para a **audiência**."
                )
            elif fluxo_detectado in ('documento_juridico', 'revisao_documento'):
                resposta_texto = (
                    "📝 Vou lidar com o **documento**: posso enviar **modelo** de **contrato** ou revisar a **petição**."
                )
            elif fluxo_detectado in (
                'envio_documento_cliente','consulta_andamento','pagamento_fora_padrao',
                'indicacao','documento_pendente','status_negociacao','decisao_permuta',
                'sumico_cliente','update_clientes_aguardando','update_documento_pendente',
                'nao_atendimento_area','status_multiplos_processos','notificacao_cliente',
                'alterar_cancelar_agendamento','resumo_estatisticas','lembrete_audiencia',
                'enviar_resumo_caso'
            ):
                resposta_texto = (
                    "📌 Posso auxiliar com **documento**, **petição** ou **contrato**, além de "
                    "acompanhar **prazos** e **audiências** do **processo**."
                )
            elif fluxo_detectado == 'fluxo_nao_detectado':
                resposta_texto = (
                    "Como posso ajudar? Posso cuidar de **documento**/**petição**, enviar **modelo** de **contrato** "
                    "ou monitorar **prazo**/**audiência**."
                )
            elif fluxo_detectado == 'erro_processar_advogado':
                resposta_texto = "⚠️ Tive um erro ao processar. Pode repetir sua solicitação?"


        # ---------------- Fluxos CLIENTE (Google + detecção simples) ------------------
        elif tipo_usuario == 'cliente':
            # ✅ Se não houver OAuth, redireciona para autorizar
            svc = get_google_sheets_service()
            if svc is None:
                return redirect(url_for("google.authorize"))

            # 1) DETECÇÃO (nova)
            intent = detect_intent(mensagem)
            # 2) AÇÃO POR FLUXO (Google)
            if intent == "relato_caso":
                ok = registrar_caso_planilha(
                    nome_escritorio=f"Escritório {(data.get('escritorio_id') or 'Geral').title()}",
                    dados_caso={
                        "nome_cliente": "NÃO_INFORMADO",
                        "telefone": numero or "",
                        "area_direito": "Geral",
                        "urgencia": "Média",
                        "resumo_caso": mensagem or "",
                        "observacoes": ""
                    },
                    email_advogado=None
                )
                # tentar identificar o sheet_id persistido
                try:
                    nome_escritorio = f"Escritório {(data.get('escritorio_id') or 'Geral').title()}"
                    arquivo_planilha_escritorio = f"sheet_id_{nome_escritorio.replace(' ', '_').lower()}.txt"
                    if os.path.exists(arquivo_planilha_escritorio):
                        with open(arquivo_planilha_escritorio, 'r') as f:
                            ids['sheet_id'] = f.read().strip()
                except Exception:
                    pass
                fluxo_detectado = "relato_caso"
                resposta_texto = (
    "✅ Seu **relato** foi registrado. Quer **agendar** uma conversa com o advogado hoje? "
    "Posso sugerir horários ou você me diz o melhor período (manhã/tarde/noite)."
)

            elif intent == "consulta_andamento_cliente":
                resposta_texto = (
                    "🔎 Para consultar o **andamento**, me envie o **número do processo** "
                    "(ex: 0000000-00.0000.0.00.0000). Se não tiver agora, posso buscar pelo **nome completo** "
                    "do titular e (se possível) **CPF** para localizar com mais precisão."
                )
                fluxo_detectado = "consulta_andamento_cliente"

                                    elif intent == "agendar_consulta_cliente":
                from datetime import datetime, timedelta, timezone
                inicio = (datetime.now(timezone.utc) + timedelta(hours=2)).isoformat(timespec="seconds")
                fim    = (datetime.now(timezone.utc) + timedelta(hours=3)).isoformat(timespec="seconds")
                event_id, event_link = criar_evento_calendar(
                    titulo="Consulta jurídica",
                    inicio_iso=inicio,
                    fim_iso=fim,
                    convidados_emails=None,
                    descricao=f"Agendamento automático para {numero}"
                )
                if event_id:
                    ids["event_id"] = event_id
                    # (Opcional) enviar email de confirmação para marcar "Gmail usado"
                    try:
                        email_id = enviar_email_gmail(
                            para="seuemail+teste@gmail.com",
                            assunto="Confirmação de agendamento",
                            texto=f"Seu agendamento está confirmado. Link do evento: {event_link}"
                        )
                        if email_id:
                            ids["email_id"] = email_id
                    except Exception:
                        pass
                    resposta_texto = f"✅ **Agendamento criado** no **Calendar**. Link: {event_link} | 📧 Confirmação enviada por e-mail."
                else:
                    resposta_texto = "⚠️ Não consegui criar agora. Me diga **dia** e **período** (manhã/tarde/noite) e eu tento novamente."
                fluxo_detectado = "agendar_consulta_cliente"

            elif intent == "enviar_documento_cliente":
                conteudo = (mensagem or "Documento enviado pelo cliente").encode("utf-8")
                file_id, file_link = upload_drive_bytes(
                    "documento_cliente.txt", conteudo, pasta_id=None, mime_type="text/plain"
                )
                if file_id:
                    ids["file_id"] = file_id
                    resposta_texto = f"✅ **Documento** salvo no **Drive**. Link: {file_link}"
                else:
                    resposta_texto = "⚠️ Não consegui salvar seu documento no **Drive** agora."
                fluxo_detectado = "enviar_documento_cliente"

            else:
                fluxo_detectado = "fluxo_nao_detectado"
                resposta_texto = "Posso te ajudar com **seu caso**, **agendar** um horário ou **salvar seu documento**."
        else:
            fluxo_detectado = 'tipo_usuario_desconhecido'
            resposta_texto = 'Informe tipo_usuario = cliente ou advogado.'

        # Armazenar no contexto da requisição para after_request (para demais caminhos)
        g.fluxo_detectado = fluxo_detectado

        payload = {
            "resposta": resposta_texto,
            "fluxo": fluxo_detectado,
            "numero": numero,
            "tipo_usuario": tipo_usuario
        }
        if ids:
            payload.update({k: v for k, v in ids.items() if v})
        return jsonify(payload), 200
    except Exception as e:
        g.fluxo_detectado = 'erro_interno'
        return jsonify({
            "resposta": "Falha interna.",
            "fluxo": 'erro_interno',
            "erro": str(e)
        }), 200
