Kit de Prompts Fixos — PocketMKT (blindagem p/ evoluções seguras)

1) Contexto-Âncora (cole no topo de QUALQUER conversa técnica)
Contexto-Âncora PocketMKT (NÃO ALTERAR):
- Arquitetura atual
  • Backend Flask principal exposto em 0.0.0.0:${FLASK_PORT:-5000}, criado por create_app() em main.py.
  • Painel Flask em app/painel/painel.py na porta ${PANEL_PORT:-8000}; Nginx faz proxy do domínio.
  • Blueprints sem prefixo:
      - atendimento_bp → /processar_atendimento (POST)
      - google_bp → /authorize, /oauth2callback
  • Integrações: Google (Sheets/Drive/Gmail/Calendar), Twilio (WhatsApp – opcional).
  • LLM (GPU) via HTTP: POST ${LLM_BASE_URL or "http://172.31.18.20:8000"}/infer
- Arquivos críticos e CONTRATOS (NÃO QUEBRAR):
  • main.py → registra blueprints; não mude nomes das rotas.
  • app/routes/atendimento.py → endpoint /processar_atendimento; manter chaves: resposta, fluxo, numero, tipo_usuario.
  • app/ollama_service.py → funções get_llama_response()/infer_llm(); respeitar payload {prompt, system, max_new_tokens}.
  • app/routes/text_processing.py → nomes de funções/assinaturas usadas por atendimento.py e e2e.
- Segurança:
  • NUNCA inserir tokens em código. Use .env/variáveis de ambiente na GPU/CPU (HUGGINGFACE_HUB_TOKEN, LLM_BASE_URL, FLASK_SECRET_KEY etc.)
- Regras de mudança:
  1) ZERO mudanças em nomes de rotas/variáveis públicas/assinaturas expostas.
  2) PATCH mínimo, incremental, com explicação curta do impacto.
  3) Sem libs novas; usar apenas dependências já presentes.
  4) Antes de mexer, rodar: curl de saúde + E2E runner (modo real, se possível).
  5) Logs padronizados no /processar_atendimento (req_id, início/fim, erros externos).

2) Criar NOVO fluxo em atendimento.py (molde)
Quero adicionar um novo fluxo chamado: <NOME_DO_FLUXO>.
Requisitos:
- NÃO alterar contratos públicos (entrada/saída).
- Seguir padrão das funções existentes: validação, try/except, retorno HTTP 200 com dict mínimo.
- Se usar Google/Twilio, apenas utilitários já existentes; se não houver, criar stub comentado.
- Cobrir 3 casos (feliz, entrada faltando, erro externo) em comentários com exemplos curl.
Saída:
- Patch unified diff SOMENTE de app/routes/atendimento.py, com 3 bullets do que mudou.

3) Ajustar função EXISTENTE sem quebrar contrato
Preciso ajustar <NOME_DA_FUNCAO> em app/routes/atendimento.py.
Objetivo: <DESCREVA O AJUSTE MINIMO>.
Restrições:
- NÃO mudar assinatura, nem chaves do retorno.
- Manter compat com chamadores atuais (Twilio, Google, e2e).
- Comentar nos branches sensíveis o motivo (curto, PT-BR).
Saída:
- Diff só de app/routes/atendimento.py + “Notas de revisão” (contrato preservado, cenários cobertos, riscos residuais).

4) LOGS & ERROS (observabilidade leve)
Quero logs padronizados em <LISTA_FUNCOES> de app/routes/atendimento.py.
- Usar logging/prints existentes.
- Níveis: info (início/fim, duração), warning (entrada inválida), error (exceções externas).
- Incluir req_id = time.time_ns() em todas as linhas.
- Erro padronizado: {"erro":"<chave>", "mensagem":"<humana>"} mantendo HTTP 200.
Saída:
- Diff só de app/routes/atendimento.py + mini‑tabela markdown simulando 1 linha por nível.

5) Validação de entrada (endurecer sem mudar comportamento)
Endureça validação em <NOME> (app/routes/atendimento.py).
- Exigir tipo_usuario, mensagem, numero (se aplicável) e normalizar (strip/lower).
- Sem libs novas.
Saída:
- Diff só de app/routes/atendimento.py + 3 casos inválidos e resposta esperada.

6) TIMEOUT/RETRY (integrações externas)
Adicionar retry leve (máx 3) e backoff exponencial em chamadas externas usadas em <NOME_DA_FUNCAO>.
- Usar time.sleep e contadores; sem libs novas.
- Após esgotar, retornar erro amigável (padrão do app).
Saída:
- Diff só de app/routes/atendimento.py + nota de como ajustar tempos no topo do arquivo.

7) Checklist de revisão antes do deploy
- [ ] Rotas preservadas (/processar_atendimento, /authorize, /oauth2callback)
- [ ] Assinaturas e chaves do retorno intactas
- [ ] Logs e erros padronizados (req_id em tudo)
- [ ] Nenhum token/segredo em código
- [ ] E2E (real) > 90% OK; cenários “advogado” sem NameError
- [ ] curl de saúde e 2 fluxos críticos executados manualmente

Bônus — “Só o diff, por favor”
RESPOSTA APENAS: patch unified diff do arquivo alvo. Não inclua texto extra.

